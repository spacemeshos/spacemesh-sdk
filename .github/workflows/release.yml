name: Build and Release

on:
  release:
    types: [created]

jobs:
  release:
    strategy:
      matrix:
        include:
          - image: macos-latest
            name: macos-amd64
            extension: dylib
            artifact: libed25519_bip32_macos-amd64.tar.gz
            toolchain: x86_64-apple-darwin
          - image: ubuntu-latest
            name: linux-amd64
            extension: so
            artifact: libed25519_bip32_linux-amd64.tar.gz
            toolchain: x86_64-unknown-linux-musl
          - image: windows-latest
            name: windows-amd64
            extension: dll
            artifact: libed25519_bip32_windows-amd64.zip
            toolchain: x86_64-pc-windows-gnu
          - image: [self-hosted, macos, arm64]
            name: macos-arm64
            extension: dylib
            artifact: libed25519_bip32_macos-arm64.tar.gz
            toolchain: aarch64-apple-darwin
          - image: [self-hosted, linux, arm64]
            name: linux-arm64
            extension: so
            artifact: libed25519_bip32_linux-arm64.tar.gz
            toolchain: aarch64-unknown-linux-musl
    runs-on: ${{ matrix.image }}
    name: Release ${{ matrix.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.toolchain }}
      - name: Regenerate C Header and Check
        run: make diff
      - name: Compile
        if: matrix.name != 'windows-amd64'
        run: cargo build --release --all-features
      - name: Compile Windows
        if: matrix.name == 'windows-amd64'
        # On Windows we only build using the GNU toolchain (not MSVC, the default)
        run: cargo build --release --all-features --target ${{ matrix.toolchain }}
      - name: Compile staticlib
        if: contains(matrix.toolchain, 'musl')
        # Linux requires a different toolchain for static lib generation
        run: |
          cargo build --release --all-features --target ${{ matrix.toolchain }}
          # overwrite static glibc static lib
          mv target/${{ matrix.toolchain }}/release/libed25519_bip32.a target/release
      - name: Prepare files
        if: matrix.name != 'windows-amd64'
        run: |
          mkdir artifacts
          mv LICENSE ed25519_bip32.h target/release/libed25519_bip32.${{ matrix.extension }} target/release/libed25519_bip32.a artifacts
          cd artifacts
          tar -czf libed25519_bip32_${{ matrix.name }}.tar.gz *
          mv libed25519_bip32_${{ matrix.name }}.tar.gz ..
      - name: Prepare files Windows
        if: matrix.name == 'windows-amd64'
        run: |
          mkdir artifacts
          Move-Item -Path LICENSE, ed25519_bip32.h -Destination artifacts
          Move-Item -Path target/${{ matrix.toolchain }}/release/ed25519_bip32.dll -Destination artifacts
          Move-Item -Path target/${{ matrix.toolchain }}/release/libed25519_bip32.a -Destination artifacts
          Compress-Archive -Path artifacts/* -Destination ${{ matrix.artifact }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.artifact }}